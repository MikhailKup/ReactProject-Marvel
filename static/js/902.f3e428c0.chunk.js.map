{"version":3,"file":"static/js/902.f3e428c0.chunk.js","mappings":"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","sources":["components/appBanner/AppBanner.js","components/errors/ErrorMessage.js","components/pages/SinglePage.js","hooks/http.hook.js","services/MarvelService.js","components/skeleton/Skeleton.js","utils/setContent.js"],"sourcesContent":["import './appBanner.scss';\nimport avengers from '../../resources/img/Avengers.png';\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\n\nconst AppBanner = () => {\n    return (\n        <div className=\"app__banner\">\n            <img src={avengers} alt=\"Avengers\"/>\n            <div className=\"app__banner-text\">\n                New comics every week!<br/>\n                Stay tuned!\n            </div>\n            <img src={avengersLogo} alt=\"Avengers logo\"/>\n        </div>\n    )\n}\n\nexport default AppBanner;","import img from './error.gif'\r\nimport './ErrorMessage.scss'\r\n\r\nconst CriticalErrorMessage = () => {\r\n\treturn (\r\n\t\t<div className=\"error-message\">\r\n\t\t\t<img src={img} alt=\"Error\" className='error-message'/>\r\n\t\t</div>\r\n  )\r\n};\r\n\r\nexport default CriticalErrorMessage;","import { useEffect, useState } from 'react'\r\nimport { useParams } from 'react-router-dom'\r\nimport useMarvelService from '../../services/MarvelService'\r\nimport AppBanner from '../appBanner/AppBanner'\r\nimport setContent from '../../utils/setContent'\r\n\r\nconst SinglePage = ({Component, dataType}) => {\r\n\tconst { id } = useParams()\r\n\tconst [data, setData] = useState(null)\r\n\tconst { getComic, getCharacter, clearError, process, setProcess } = useMarvelService()\r\n\r\n\tuseEffect(() => {\r\n\t\tupdateData()\r\n\t}, [id])\r\n\r\n\tconst updateData = () => {\r\n\t\tclearError()\r\n\t\tswitch(dataType) {\r\n\t\t\tcase 'character':\r\n\t\t\t\tgetCharacter(id)\r\n\t\t\t\t\t.then(onDataLoaded)\r\n\t\t\t\t\t.then(() => setProcess('confirmed'));\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'comic':\r\n\t\t\t\tgetComic(id)\r\n\t\t\t\t\t.then(onDataLoaded)\r\n\t\t\t\t\t.then(() => setProcess('confirmed'));\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error('Error');\r\n\t\t}\r\n\t}\r\n\r\n\tconst onDataLoaded = data => {\r\n\t\tsetData(data)\r\n\t}\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<AppBanner />\r\n\t\t\t{setContent(process, Component, data)}\r\n\t\t</>\r\n\t)\r\n}\r\n\r\nexport default SinglePage\r\n","import { useState, useCallback } from 'react';\r\n\r\nconst useHttp = () => {\r\n\tconst [process, setProcess] = useState('waiting');\r\n\r\n\tconst request = useCallback(async (url, method = 'GET', body = null, \r\n\theaders = {'Content-Type': 'application/json'}) => {\r\n\t\tsetProcess('loading')\r\n\t\ttry {\r\n\t\t\tconst response = await fetch(url, {method, body, headers});\r\n\t\t\tif (!response.ok) {\r\n\t\t\t\tthrow new Error(`Could not fetch ${url}, status: ${response.status}`)\r\n\t\t\t}\r\n\t\t\tconst data = await response.json();\r\n\t\t\treturn data\r\n\t\t} catch (error) {\r\n\t\t\tsetProcess('error')\r\n\t\t\tthrow error\r\n\t\t}\r\n\t}, []);\r\n\r\n\tconst clearError = useCallback(() => {\r\n\t\tsetProcess('loading')\r\n\t}, [])\r\n\r\n\treturn {request, process, clearError, setProcess}\r\n};\r\n\r\nexport default useHttp","import useHttp from '../hooks/http.hook'\r\n\r\nconst useMarvelService = () => {\r\n\tconst { request, clearError, process, setProcess } = useHttp()\r\n\tconst _apiBase = 'https://gateway.marvel.com:443/v1/public/'\r\n\tconst _apiKey = 'apikey=13fce9aab4e28128f7b9d466dbd48844'\r\n\tconst _baseOffset = 210\r\n\r\n\tconst getAllCharacters = async (offset = _baseOffset) => {\r\n\t\tconst res = await request(\r\n\t\t\t`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`\r\n\t\t)\r\n\t\treturn res.data.results.map(_transformCharacter)\r\n\t}\r\n\r\n\tconst getCharacter = async id => {\r\n\t\tconst res = await request(`${_apiBase}characters/${id}?${_apiKey}`)\r\n\t\treturn _transformCharacter(res.data.results[0])\r\n\t}\r\n\r\n\tconst getCharacterByName = async (name) => {\r\n\t\tconst res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n\t\treturn res.data.results.map(_transformCharacter);\r\n\t};\r\n\r\n\tconst getAllComics = async (offset = 0) => {\r\n\t\tconst res = await request(\r\n\t\t\t`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`\r\n\t\t)\r\n\t\treturn res.data.results.map(_transformComics)\r\n\t}\r\n\r\n\tconst getComic = async id => {\r\n\t\tconst res = await request(`${_apiBase}comics/${id}?${_apiKey}`)\r\n\t\treturn _transformComics(res.data.results[0])\r\n\t}\r\n\r\n\tconst _transformCharacter = char => {\r\n\t\treturn {\r\n\t\t\tid: char.id,\r\n\t\t\tname: char.name,\r\n\t\t\tdescription: char.description\r\n\t\t\t\t? `${char.description.slice(0, 150)}...`\r\n\t\t\t\t: 'There is no description for this character',\r\n\t\t\tbigdescription: char.description\r\n\t\t\t? char.description\r\n\t\t\t: 'There is no description for this character',\r\n\t\t\tthumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n\t\t\thomepage: char.urls[0].url,\r\n\t\t\twiki: char.urls[1].url,\r\n\t\t\tcomics: char.comics.items ? char.comics.items.slice(0, 10) : null,\r\n\t\t}\r\n\t}\r\n\r\n\tconst _transformComics = comics => {\r\n\t\treturn {\r\n\t\t\tid: comics.id,\r\n\t\t\ttitle: comics.title,\r\n\t\t\tdescription: comics.description\r\n\t\t\t\t? `${comics.description.slice(0, 35)}...`\r\n\t\t\t\t: 'There is no description',\r\n\t\t\tbigdescription: comics.description\r\n\t\t\t? comics.description\r\n\t\t\t: 'There is no description',\r\n\t\t\tpageCount: comics.pageCount\r\n\t\t\t\t? `${comics.pageCount} p.`\r\n\t\t\t\t: \"No information about the number of pages\",\r\n\t\t\tthumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\r\n\t\t\tlanguage: comics.textObjects[0]?.language || \"en-us\",\r\n\t\t\tprice: comics.prices[0].price ? `${comics.prices[0].price}$` : 'not available',\r\n\t\t}\r\n\t}\r\n\r\n\treturn { getAllCharacters, \r\n\t\t\t\t\tgetCharacter, \r\n\t\t\t\t\tclearError, \r\n\t\t\t\t\tgetAllComics, \r\n\t\t\t\t\tgetComic, \r\n\t\t\t\t\tgetCharacterByName, \r\n\t\t\t\t\tprocess,\r\n\t\t\t\t\tsetProcess }\r\n}\r\n\r\nexport default useMarvelService\r\n","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import Skeleton from '../components/skeleton/Skeleton';\r\nimport Spinner from '../components/spinner/Spinner';\r\nimport CriticalErrorMessage from '../components/errors/ErrorMessage';\r\n\r\nconst setContent = (process, Component, data) => {\r\n\tswitch(process) {\r\n\t\tcase 'waiting':\r\n\t\t\treturn <Skeleton/>;\r\n\t\tcase 'loading':\r\n\t\t\treturn <Spinner/>;\r\n\t\tcase 'confirmed':\r\n\t\t\treturn <Component data={data}/>;\r\n\t\tcase 'error':\r\n\t\t\treturn <CriticalErrorMessage/>\r\n\t\tdefault:\r\n\t\t\tthrow new Error();\r\n\t}\r\n};\r\n\r\nexport default setContent;"],"names":["AppBanner","_jsxs","className","children","_jsx","src","avengers","alt","avengersLogo","CriticalErrorMessage","img","_ref","Component","dataType","id","useParams","data","setData","useState","getComic","getCharacter","clearError","process","setProcess","useMarvelService","useEffect","updateData","then","onDataLoaded","Error","_Fragment","setContent","useHttp","request","useCallback","async","url","method","arguments","length","undefined","body","headers","response","fetch","ok","concat","status","json","error","_apiBase","_apiKey","_transformCharacter","char","name","description","slice","bigdescription","thumbnail","path","extension","homepage","urls","wiki","comics","items","_transformComics","_comics$textObjects$","title","pageCount","language","textObjects","price","prices","getAllCharacters","offset","results","map","res","getAllComics","getCharacterByName","Skeleton","Spinner"],"sourceRoot":""}