{"version":3,"file":"static/js/944.5e58269d.chunk.js","mappings":"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","sources":["components/errorBoundary/ErrorBoundary.js","components/errors/ErrorMessage.js","components/charInfo/CharInfo.js","components/charList/CharList.js","components/randomChar/RandomChar.js","components/searchForm/SearchForm.js","components/pages/MainPage.js","hooks/http.hook.js","services/MarvelService.js","components/skeleton/Skeleton.js","utils/setContent.js"],"sourcesContent":["import { Component } from 'react'\r\nimport CriticalErrorMessage from '../errors/ErrorMessage'\r\n\r\nclass ErrorBoundary extends Component {\r\n\tstate = {\r\n\t\terror: false,\r\n\t}\r\n\r\n\tcomponentDidCatch(err, errInfo) {\r\n\t\tconsole.log(err, errInfo)\r\n\t\tthis.setState({ error: true })\r\n\t}\r\n\r\n\trender() {\r\n\t\tif (this.state.error) {\r\n\t\t\treturn <CriticalErrorMessage/>\r\n\t\t}\r\n\t\treturn this.props.children\r\n\t}\r\n}\r\n\r\nexport default ErrorBoundary\r\n","import img from './error.gif'\r\nimport './ErrorMessage.scss'\r\n\r\nconst CriticalErrorMessage = () => {\r\n\treturn (\r\n\t\t<div className=\"error-message\">\r\n\t\t\t<img src={img} alt=\"Error\" className='error-message'/>\r\n\t\t</div>\r\n  )\r\n};\r\n\r\nexport default CriticalErrorMessage;","import PropTypes from 'prop-types'\nimport { Link } from 'react-router-dom';\nimport { useEffect, useState } from 'react'\nimport useMarvelService from '../../services/MarvelService'\nimport setContent from '../../utils/setContent';\nimport './charInfo.scss'\n\nconst CharInfo = props => {\n\tconst [char, setChar] = useState(null)\n\tconst { getCharacter, clearError, process, setProcess } = useMarvelService()\n\n\tuseEffect(() => {\n\t\tupdateChar()\n\t}, [props.charId])\n\n\tconst updateChar = () => {\n\t\tconst { charId } = props\n\t\tif (!charId) {\n\t\t\treturn\n\t\t}\n\t\tclearError()\n\t\tgetCharacter(charId)\n\t\t\t.then(onCharLoaded)\n\t\t\t.then(() => setProcess('confirmed'));\n\t}\n\n\tconst onCharLoaded = char => {\n\t\tsetChar(char)\n\t}\n\n\treturn (\n\t\t<div className='char__info'>\n\t\t\t{setContent(process, View, char)}\n\t\t</div>\n\t)\n}\n\nconst View = ({ data }) => {\n\tconst { name, description, thumbnail, homepage, wiki, comics } = data\n\tlet imgStyle = { objectFit: 'cover' }\n\tif (\n\t\tthumbnail ===\n\t\t'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg'\n\t) {\n\t\timgStyle = { objectFit: 'contain', heigth: '160px', width: '160px' }\n\t}\n\treturn (\n\t\t<>\n\t\t\t<div className='char__basics'>\n\t\t\t\t<img src={thumbnail} alt={name} style={imgStyle} />\n\t\t\t\t<div>\n\t\t\t\t\t<div className='char__info-name'>{name}</div>\n\t\t\t\t\t<div className='char__btns'>\n\t\t\t\t\t\t<a href={homepage} className='button button__main'>\n\t\t\t\t\t\t\t<div className='inner'>homepage</div>\n\t\t\t\t\t\t</a>\n\t\t\t\t\t\t<a href={wiki} className='button button__secondary'>\n\t\t\t\t\t\t\t<div className='inner'>Wiki</div>\n\t\t\t\t\t\t</a>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div className='char__descr'>{description}</div>\n\t\t\t<div className='char__comics'>Comics:</div>\n\t\t\t<ul className='char__comics-list'>\n\t\t\t\t{comics.length > 0 ? null : 'There is comics for this character'}\n\t\t\t\t{comics.map((item, i) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<Link to={`/comics/${item.resourceURI.split('/').pop()}`} className='char__comics-item' key={i}>\n\t\t\t\t\t\t\t{item.name}\n\t\t\t\t\t\t</Link>\n\t\t\t\t\t)\n\t\t\t\t})}\n\t\t\t</ul>\n\t\t</>\n\t)\n}\n\nCharInfo.propTypes = {\n\tcharId: PropTypes.number,\n}\n\nexport default CharInfo\n","import { useState, useEffect, useRef } from 'react'\nimport useMarvelService from '../../services/MarvelService'\nimport CriticalErrorMessage from '../errors/ErrorMessage'\nimport Spinner from '../spinner/Spinner'\nimport { CSSTransition, TransitionGroup } from 'react-transition-group'\nimport './charList.scss'\n\nconst setContent = (process, Component, newItemLoading) => {\n\tswitch(process) {\n\t\tcase 'waiting':\n\t\t\treturn <Spinner/>;\n\t\tcase 'loading':\n\t\t\treturn newItemLoading ? <Component/> : <Spinner/>;\n\t\tcase 'confirmed':\n\t\t\treturn <Component/>;\n\t\tcase 'error':\n\t\t\treturn <CriticalErrorMessage/>\n\t\tdefault:\n\t\t\tthrow new Error();\n\t}\n};\n\nconst CharList = (props) => {\n\tconst [charList, setCharList] = useState([]);\n\tconst [newItemLoading, setNewItemLoading] = useState(false);\n\tconst [offset, setOffset] = useState(210);\n\tconst [charEnded, setCharEnded] = useState(false);\n\n\tconst { getAllCharacters, process, setProcess } = useMarvelService();\n\n\tuseEffect(() => {\n\t\tonRequest(offset, true)\n\t}, []);\n\t\n\tconst onRequest = (offset, initial) => {\n\t\tinitial ? setNewItemLoading(false) : setNewItemLoading(true)\n\t\tgetAllCharacters(offset)\n\t\t\t.then(onCharListLoaded)\n\t\t\t.then(() => setProcess('confirmed'));\n\t}\n\n\tconst onCharListLoaded = newCharList => {\n\t\tlet ended = false\n\t\tif (newCharList.length < 9) {\n\t\t\tended = true\n\t\t}\n\t\tsetCharList(charList => [...charList, ...newCharList])\n\t\tsetNewItemLoading(false)\n\t\tsetOffset(offset => offset + 9)\n\t\tsetCharEnded(ended)\n\t}\n\n\tconst itemsRef = useRef([]);\n\n\tconst focusOnItem = id => {\n\t\titemsRef.current.forEach(item => item.classList.remove('char__item_selected'))\n\t\titemsRef.current[id].classList.add('char__item_selected')\n\t\titemsRef.current[id].focus()\n\t}\n\n\tfunction renderItems(arr) {\n\t\tconst items = arr.map((item, i) => {\n\t\t\tlet imgStyle = { objectFit: 'cover' }\n\t\t\tif (\n\t\t\t\titem.thumbnail ===\n\t\t\t\t'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg'\n\t\t\t) {\n\t\t\t\timgStyle = { objectFit: 'unset' }\n\t\t\t}\n\n\t\t\treturn (\n\t\t\t\t<CSSTransition timeout={500} key={item.id} classNames='char__item'>\n\t\t\t\t\t<li\n\t\t\t\t\t\tclassName='char__item'\n\t\t\t\t\t\ttabIndex={0}\n\t\t\t\t\t\tref={el => itemsRef.current[i] = el}\n\t\t\t\t\t\tkey={item.id}\n\t\t\t\t\t\tonClick=    {() => {\n\t\t\t\t\t\t\tprops.onCharSelected(item.id)\n\t\t\t\t\t\t\tfocusOnItem(i)\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tonKeyPress={(e) => {\n\t\t\t\t\t\t\tif (e.key === ' ' || e.key === 'Enter') {\n\t\t\t\t\t\t\t\tprops.onCharSelected(item.id)\n\t\t\t\t\t\t\t\tfocusOnItem(i)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\t<img src={item.thumbnail} alt={item.name} style={imgStyle} />\n\t\t\t\t\t\t<div className='char__name'>{item.name}</div>\n\t\t\t\t\t</li>\n\t\t\t\t</CSSTransition>\n\t\t\t)\n\t\t})\n\t\treturn (\n\t\t\t<ul className='char__grid'>\n\t\t\t\t<TransitionGroup component={null}>\n\t\t\t\t\t{items}\n\t\t\t\t</TransitionGroup>\n\t\t\t</ul>\n\t\t)\n\t}\n\n\treturn (\n\t\t<div className='char__list'>\n\t\t\t{setContent(process, () => renderItems(charList), newItemLoading)}\n\t\t\t<button\n\t\t\t\tclassName='button button__main button__long'\n\t\t\t\tdisabled={newItemLoading}\n\t\t\t\tstyle={{ display: charEnded ? 'none' : 'block' }}\n\t\t\t\tonClick={() => onRequest(offset)}\n\t\t\t>\n\t\t\t\t<div className='inner'>load more</div>\n\t\t\t</button>\n\t\t</div>\n\t)\n};\n\nexport default CharList\n","import { useState, useEffect } from 'react'\nimport mjolnir from '../../resources/img/mjolnir.png'\nimport useMarvelService from '../../services/MarvelService'\nimport setContent from '../../utils/setContent'\nimport './randomChar.scss'\n\nconst RandomChar = () => {\n\tconst [char, setChar] = useState({});\n\n\tconst { getCharacter, clearError, process, setProcess } = useMarvelService();\n\n\tuseEffect(() => {\n\t\tupdateChar();\n\t\tconst timerId = setInterval(updateChar, 60000)\n\t\treturn () => {\n\t\t\tclearInterval(timerId)\n\t\t}\n\t}, []);\n\n\tconst onCharLoaded = (char) => {\n\t\tsetChar(char)\n\t};\n\n\tconst updateChar = () => {\n\t\tclearError()\n\t\tconst id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\n\t\tgetCharacter(id)\n\t\t\t\t.then(onCharLoaded)\n\t\t\t\t.then(() => setProcess('confirmed'));\n\t};\n\n\treturn (\n\t\t<div className='randomchar'>\n\t\t\t{setContent(process, View, char)}\n\t\t\t<div className='randomchar__static'>\n\t\t\t\t<p className='randomchar__title'>\n\t\t\t\t\tRandom character for today!\n\t\t\t\t\t<br />\n\t\t\t\t\tDo you want to get to know him better?\n\t\t\t\t</p>\n\t\t\t\t<p className='randomchar__title'>Or choose another one</p>\n\t\t\t\t<button className='button button__main' onClick={updateChar}>\n\t\t\t\t\t<div className='inner'>try it</div>\n\t\t\t\t</button>\n\t\t\t\t<img src={mjolnir} alt='mjolnir' className='randomchar__decoration' />\n\t\t\t</div>\n\t\t</div>\n\t)\n};\n\nconst View = ({data}) => {\n\tconst { name, description, thumbnail, homepage, wiki } = data;\n\tlet imgStyle = {'objectFit' : 'cover'};\n\tif (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n\t\timgStyle = {'objectFit' : 'contain'};\n\t}\n\treturn (\n\t\t<div className='randomchar__block'>\n\t\t\t<img\n\t\t\t\tsrc={thumbnail}\n\t\t\t\talt='Random character'\n\t\t\t\tclassName='randomchar__img'\n\t\t\t\tstyle={imgStyle}\n\t\t\t/>\n\t\t\t<div className='randomchar__info'>\n\t\t\t\t<p className='randomchar__name'>{name}</p>\n\t\t\t\t<p className='randomchar__descr'>{description}</p>\n\t\t\t\t<div className='randomchar__btns'>\n\t\t\t\t\t<a href={homepage} className='button button__main'>\n\t\t\t\t\t\t<div className='inner'>homepage</div>\n\t\t\t\t\t</a>\n\t\t\t\t\t<a href={wiki} className='button button__secondary'>\n\t\t\t\t\t\t<div className='inner'>Wiki</div>\n\t\t\t\t\t</a>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default RandomChar;\n","import { Formik, Form, Field, ErrorMessage } from 'formik';\r\nimport { Link } from 'react-router-dom';\r\nimport { useState } from 'react';\r\nimport * as Yup from 'yup';\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport CriticalErrorMessage from '../errors/ErrorMessage';\r\n\r\nimport './SearchForm.scss'\r\n\r\nconst SearchForm = () => {\r\n\tconst [char, setChar] = useState(null);\r\n  const {loading, error, getCharacterByName, clearError} = useMarvelService();\r\n\r\n\tconst onCharLoaded = (char) => {\r\n\t\tsetChar(char)\r\n\t};\r\n\tconst updateChar = (name) => {\r\n\t\tclearError();\r\n\t\tgetCharacterByName(name)\r\n    .then(onCharLoaded);\r\n\t};\r\n\r\n\tconst errorMessage = error ? <div className=\"searchform__error\"><CriticalErrorMessage/></div> : null;\r\n\tconst results = !char ? null : char.length > 0 ?\r\n\t\t\t\t\t\t\t\t\t\t<>\r\n\t\t\t\t\t\t\t\t\t\t\t<div className=\"searchform__bottom\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"searchform__success\">There is! Visit {char[0].name} page?</div>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<Link to={`/characters/${char[0].id}`} className=\"button button__secondary\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"inner\">To page</div>\r\n\t\t\t\t\t\t\t\t\t\t\t\t</Link>\r\n\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t</> \r\n\t\t\t\t\t\t\t\t\t\t: \r\n                    <>\r\n\t\t\t\t\t\t\t\t\t\t\t<div className=\"searchform__error\">\r\n                        The character was not found. Check the name and try again\r\n                   \t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t</>\r\n\treturn (\r\n\t\t<div className=\"searchform\">\r\n\t\t\t<div className='searchform__title'>Or find a character by name:</div>\r\n\t\t\t<Formik\r\n\t\t\t\tinitialValues={{\r\n\t\t\t\t\tname: '',\r\n\t\t\t\t}}\r\n\t\t\t\tvalidationSchema={Yup.object({\r\n\t\t\t\t\t\tname: Yup.string().required('This field is required'),\r\n\t\t\t\t})}\r\n\t\t\t\tonSubmit = { ({name}) => {\r\n\t\t\t\t\tupdateChar(name);\r\n\t\t\t\t}}\r\n\t\t\t>\r\n\t\t\t\t<Form>\r\n\t\t\t\t\t<div className=\"searchform__top\">\r\n\t\t\t\t\t\t<Field id='name' type=\"text\" name=\"name\" placeholder=\"Enter name\"/>\r\n\t\t\t\t\t\t<button className=\"button button__main\" type=\"submit\" disabled={loading}>\r\n\t\t\t\t\t\t\t<div className='inner'>FIND</div>\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"searchform__bottom\">\r\n\t\t\t\t\t\t<ErrorMessage component=\"div\" className=\"searchform__error\" name=\"name\"/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</Form>\r\n\t\t\t</Formik>\r\n\t\t\t{results}\r\n\t\t\t{errorMessage}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default SearchForm;","import { useState } from 'react'\r\nimport { Helmet } from 'react-helmet'\r\nimport CharInfo from '../charInfo/CharInfo'\r\nimport CharList from '../charList/CharList'\r\nimport ErrorBoundary from '../errorBoundary/ErrorBoundary'\r\nimport RandomChar from '../randomChar/RandomChar'\r\nimport SearchForm from '../searchForm/SearchForm'\r\n\r\nimport decoration from '../../resources/img/vision.png'\r\n\r\nconst MainPage = () => {\r\n\tconst [selectedChar, setChar] = useState(null)\r\n\r\n\tfunction onCharSelected(id) {\r\n\t\tsetChar(selectedChar => id)\r\n\t}\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<Helmet>\r\n\t\t\t\t<meta\r\n\t\t\t\t\tname=\"description\"\r\n\t\t\t\t\tcontent=\"Marvel information portal\"\r\n\t\t\t\t/>\r\n\t\t\t\t<title>Marvel information</title>\r\n\t\t\t</Helmet>\r\n\t\t\t<ErrorBoundary>\r\n\t\t\t\t<RandomChar />\r\n\t\t\t</ErrorBoundary>\r\n\t\t\t<div className='char__content'>\r\n\t\t\t\t<div className='char__content_left'>\r\n\t\t\t\t\t<ErrorBoundary>\r\n\t\t\t\t\t\t<CharList onCharSelected={onCharSelected} />\r\n\t\t\t\t\t</ErrorBoundary>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className='char__content_right'>\r\n\t\t\t\t\t<ErrorBoundary>\r\n\t\t\t\t\t\t<CharInfo charId={selectedChar} />\r\n\t\t\t\t\t</ErrorBoundary>\r\n\t\t\t\t\t<SearchForm />\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<img className='bg-decoration' src={decoration} alt='vision' />\r\n\t\t</>\r\n\t)\r\n}\r\n\r\nexport default MainPage\r\n","import { useState, useCallback } from 'react';\r\n\r\nconst useHttp = (e) => {\r\n\tconst [process, setProcess] = useState('waiting');\r\n\r\n\tconst request = useCallback(async (url, method = 'GET', body = null, \r\n\theaders = {'Content-Type': 'application/json'}) => {\r\n\t\tsetProcess('loading')\r\n\t\ttry {\r\n\t\t\tconst response = await fetch(url, {method, body, headers});\r\n\t\t\tif (!response.ok) {\r\n\t\t\t\tthrow new Error(`Could not fetch ${url}, status: ${response.status}`)\r\n\t\t\t}\r\n\t\t\tconst data = await response.json();\r\n\t\t\treturn data\r\n\t\t} catch (error) {\r\n\t\t\tsetProcess('error')\r\n\t\t\tthrow error\r\n\t\t}\r\n\t}, []);\r\n\r\n\tconst clearError = useCallback(() => {\r\n\t\tsetProcess('loading')\r\n\t}, [])\r\n\r\n\treturn {request, process, clearError, setProcess}\r\n};\r\n\r\nexport default useHttp","import useHttp from '../hooks/http.hook'\r\n\r\nconst useMarvelService = () => {\r\n\tconst { request, clearError, process, setProcess } = useHttp()\r\n\tconst _apiBase = 'https://gateway.marvel.com:443/v1/public/'\r\n\tconst _apiKey = 'apikey=13fce9aab4e28128f7b9d466dbd48844'\r\n\tconst _baseOffset = 210\r\n\r\n\tconst getAllCharacters = async (offset = _baseOffset) => {\r\n\t\tconst res = await request(\r\n\t\t\t`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`\r\n\t\t)\r\n\t\treturn res.data.results.map(_transformCharacter)\r\n\t}\r\n\r\n\tconst getCharacter = async id => {\r\n\t\tconst res = await request(`${_apiBase}characters/${id}?${_apiKey}`)\r\n\t\treturn _transformCharacter(res.data.results[0])\r\n\t}\r\n\r\n\tconst getCharacterByName = async (name) => {\r\n\t\tconst res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n\t\treturn res.data.results.map(_transformCharacter);\r\n\t};\r\n\r\n\tconst getAllComics = async (offset = 0) => {\r\n\t\tconst res = await request(\r\n\t\t\t`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`\r\n\t\t)\r\n\t\treturn res.data.results.map(_transformComics)\r\n\t}\r\n\r\n\tconst getComic = async id => {\r\n\t\tconst res = await request(`${_apiBase}comics/${id}?${_apiKey}`)\r\n\t\treturn _transformComics(res.data.results[0])\r\n\t}\r\n\r\n\tconst _transformCharacter = char => {\r\n\t\treturn {\r\n\t\t\tid: char.id,\r\n\t\t\tname: char.name,\r\n\t\t\tdescription: char.description\r\n\t\t\t\t? `${char.description.slice(0, 150)}...`\r\n\t\t\t\t: 'There is no description for this character',\r\n\t\t\tbigdescription: char.description\r\n\t\t\t? char.description\r\n\t\t\t: 'There is no description for this character',\r\n\t\t\tthumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n\t\t\thomepage: char.urls[0].url,\r\n\t\t\twiki: char.urls[1].url,\r\n\t\t\tcomics: char.comics.items ? char.comics.items.slice(0, 10) : null,\r\n\t\t}\r\n\t}\r\n\r\n\tconst _transformComics = comics => {\r\n\t\treturn {\r\n\t\t\tid: comics.id,\r\n\t\t\ttitle: comics.title,\r\n\t\t\tdescription: comics.description\r\n\t\t\t\t? `${comics.description.slice(0, 35)}...`\r\n\t\t\t\t: 'There is no description',\r\n\t\t\tbigdescription: comics.description\r\n\t\t\t? comics.description\r\n\t\t\t: 'There is no description',\r\n\t\t\tpageCount: comics.pageCount\r\n\t\t\t\t? `${comics.pageCount} p.`\r\n\t\t\t\t: \"No information about the number of pages\",\r\n\t\t\tthumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\r\n\t\t\tlanguage: comics.textObjects[0]?.language || \"en-us\",\r\n\t\t\tprice: comics.prices[0].price ? `${comics.prices[0].price}$` : 'not available',\r\n\t\t}\r\n\t}\r\n\r\n\treturn { getAllCharacters, \r\n\t\t\t\t\tgetCharacter, \r\n\t\t\t\t\tclearError, \r\n\t\t\t\t\tgetAllComics, \r\n\t\t\t\t\tgetComic, \r\n\t\t\t\t\tgetCharacterByName, \r\n\t\t\t\t\tprocess,\r\n\t\t\t\t\tsetProcess }\r\n}\r\n\r\nexport default useMarvelService\r\n","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import Skeleton from '../components/skeleton/Skeleton';\r\nimport Spinner from '../components/spinner/Spinner';\r\nimport CriticalErrorMessage from '../components/errors/ErrorMessage';\r\n\r\nconst setContent = (process, Component, data) => {\r\n\tswitch(process) {\r\n\t\tcase 'waiting':\r\n\t\t\treturn <Skeleton/>;\r\n\t\tcase 'loading':\r\n\t\t\treturn <Spinner/>;\r\n\t\tcase 'confirmed':\r\n\t\t\treturn <Component data={data}/>;\r\n\t\tcase 'error':\r\n\t\t\treturn <CriticalErrorMessage/>\r\n\t\tdefault:\r\n\t\t\tthrow new Error();\r\n\t}\r\n};\r\n\r\nexport default setContent;"],"names":["ErrorBoundary","Component","constructor","arguments","state","error","componentDidCatch","err","errInfo","console","log","this","setState","render","_jsx","CriticalErrorMessage","props","children","className","src","img","alt","View","_ref","data","name","description","thumbnail","homepage","wiki","comics","imgStyle","objectFit","heigth","width","_jsxs","_Fragment","style","href","length","map","item","i","Link","to","concat","resourceURI","split","pop","char","setChar","useState","getCharacter","clearError","process","setProcess","useMarvelService","useEffect","updateChar","charId","then","onCharLoaded","setContent","newItemLoading","Spinner","Error","charList","setCharList","setNewItemLoading","offset","setOffset","charEnded","setCharEnded","getAllCharacters","onRequest","initial","onCharListLoaded","newCharList","ended","itemsRef","useRef","focusOnItem","id","current","forEach","classList","remove","add","focus","arr","items","CSSTransition","timeout","classNames","tabIndex","ref","el","onClick","onCharSelected","onKeyPress","e","key","TransitionGroup","component","renderItems","disabled","display","RandomChar","timerId","setInterval","clearInterval","Math","floor","random","mjolnir","SearchForm","loading","getCharacterByName","errorMessage","results","Formik","initialValues","validationSchema","Yup","required","onSubmit","Form","Field","type","placeholder","ErrorMessage","MainPage","selectedChar","Helmet","content","CharList","CharInfo","decoration","request","useCallback","async","url","method","undefined","body","headers","response","fetch","ok","status","json","useHttp","_apiBase","_apiKey","_transformCharacter","slice","bigdescription","path","extension","urls","_transformComics","_comics$textObjects$","title","pageCount","language","textObjects","price","prices","res","getAllComics","getComic","Skeleton"],"sourceRoot":""}