{"version":3,"file":"static/js/902.8fce98d9.chunk.js","mappings":"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","sources":["components/appBanner/AppBanner.js","components/errors/ErrorMessage.js","components/pages/SinglePage.js","hooks/http.hook.js","services/MarvelService.js"],"sourcesContent":["import './appBanner.scss';\nimport avengers from '../../resources/img/Avengers.png';\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\n\nconst AppBanner = () => {\n    return (\n        <div className=\"app__banner\">\n            <img src={avengers} alt=\"Avengers\"/>\n            <div className=\"app__banner-text\">\n                New comics every week!<br/>\n                Stay tuned!\n            </div>\n            <img src={avengersLogo} alt=\"Avengers logo\"/>\n        </div>\n    )\n}\n\nexport default AppBanner;","import img from './error.gif'\r\nimport './ErrorMessage.scss'\r\n\r\nconst CriticalErrorMessage = () => {\r\n\treturn (\r\n\t\t<div className=\"error-message\">\r\n\t\t\t<img src={img} alt=\"Error\" className='error-message'/>\r\n\t\t</div>\r\n  )\r\n};\r\n\r\nexport default CriticalErrorMessage;","import { useEffect, useState } from 'react'\r\nimport { useParams } from 'react-router-dom'\r\nimport useMarvelService from '../../services/MarvelService'\r\nimport AppBanner from '../appBanner/AppBanner'\r\nimport CriticalErrorMessage from '../errors/ErrorMessage'\r\nimport Spinner from '../spinner/Spinner'\r\n\r\nconst SinglePage = ({Component, dataType}) => {\r\n\tconst { id } = useParams()\r\n\tconst [data, setData] = useState(null)\r\n\tconst { loading, error, getComic, getCharacter, clearError } = useMarvelService()\r\n\r\n\tuseEffect(() => {\r\n\t\tupdateData()\r\n\t}, [id])\r\n\r\n\tconst updateData = () => {\r\n\t\tclearError()\r\n\t\tswitch(dataType) {\r\n\t\t\tcase 'character':\r\n\t\t\t\tgetCharacter(id).then(onDataLoaded);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'comic':\r\n\t\t\t\tgetComic(id).then(onDataLoaded);\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error('Error');\r\n\t\t}\r\n\t}\r\n\r\n\tconst onDataLoaded = data => {\r\n\t\tsetData(data)\r\n\t}\r\n\r\n\tconst errorMessage = error ? <CriticalErrorMessage /> : null\r\n\tconst spinner = loading ? <Spinner /> : null\r\n\tconst content = !(loading || error || !data) ? <Component data={data} /> : null\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<AppBanner />\r\n\t\t\t{spinner}\r\n\t\t\t{errorMessage}\r\n\t\t\t{content}\r\n\t\t</>\r\n\t)\r\n}\r\n\r\nexport default SinglePage\r\n","import { useState, useCallback } from 'react';\r\n\r\nconst useHttp = (e) => {\r\n\tconst [loading, setLoading] = useState(false);\r\n\tconst [error, setError] = useState(null);\r\n\r\n\tconst request = useCallback(async (url, method = 'GET', body = null, \r\n\theaders = {'Content-Type': 'application/json'}) => {\r\n\t\tsetLoading(true)\r\n\t\ttry {\r\n\t\t\tconst response = await fetch(url, {method, body, headers});\r\n\t\t\tif (!response.ok) {\r\n\t\t\t\tthrow new Error(`Could not fetch ${url}, status: ${response.status}`)\r\n\t\t\t}\r\n\t\t\tconst data = await response.json();\r\n\t\t\tsetLoading(false)\r\n\t\t\treturn data\r\n\t\t} catch (error) {\r\n\t\t\tsetLoading(false)\r\n\t\t\tsetError(error.message)\r\n\t\t\tthrow error\r\n\t\t}\r\n\t}, []);\r\n\r\n\tconst clearError = useCallback(() => {\r\n\t\tsetError(null)\r\n\t}, [])\r\n\r\n\treturn {loading, request, error, clearError}\r\n};\r\n\r\nexport default useHttp","import useHttp from '../hooks/http.hook'\r\n\r\nconst useMarvelService = () => {\r\n\tconst { loading, request, error, clearError } = useHttp()\r\n\tconst _apiBase = 'https://gateway.marvel.com:443/v1/public/'\r\n\tconst _apiKey = 'apikey=13fce9aab4e28128f7b9d466dbd48844'\r\n\tconst _baseOffset = 210\r\n\r\n\tconst getAllCharacters = async (offset = _baseOffset) => {\r\n\t\tconst res = await request(\r\n\t\t\t`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`\r\n\t\t)\r\n\t\treturn res.data.results.map(_transformCharacter)\r\n\t}\r\n\r\n\tconst getCharacter = async id => {\r\n\t\tconst res = await request(`${_apiBase}characters/${id}?${_apiKey}`)\r\n\t\treturn _transformCharacter(res.data.results[0])\r\n\t}\r\n\r\n\tconst getCharacterByName = async (name) => {\r\n\t\tconst res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n\t\treturn res.data.results.map(_transformCharacter);\r\n\t};\r\n\r\n\tconst getAllComics = async (offset = 0) => {\r\n\t\tconst res = await request(\r\n\t\t\t`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`\r\n\t\t)\r\n\t\treturn res.data.results.map(_transformComics)\r\n\t}\r\n\r\n\tconst getComic = async id => {\r\n\t\tconst res = await request(`${_apiBase}comics/${id}?${_apiKey}`)\r\n\t\treturn _transformComics(res.data.results[0])\r\n\t}\r\n\r\n\tconst _transformCharacter = char => {\r\n\t\treturn {\r\n\t\t\tid: char.id,\r\n\t\t\tname: char.name,\r\n\t\t\tdescription: char.description\r\n\t\t\t\t? `${char.description.slice(0, 150)}...`\r\n\t\t\t\t: 'Sorry...There is no description for this character',\r\n\t\t\tthumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n\t\t\thomepage: char.urls[0].url,\r\n\t\t\twiki: char.urls[1].url,\r\n\t\t\tcomics: char.comics.items ? char.comics.items.slice(0, 10) : null,\r\n\t\t}\r\n\t}\r\n\r\n\tconst _transformComics = comics => {\r\n\t\treturn {\r\n\t\t\tid: comics.id,\r\n\t\t\ttitle: comics.title,\r\n\t\t\tdescription: comics.description\r\n\t\t\t\t? `${comics.description.slice(0, 35)}...`\r\n\t\t\t\t: 'There is no description',\r\n\t\t\tpageCount: comics.pageCount\r\n\t\t\t\t? `${comics.pageCount} p.`\r\n\t\t\t\t: \"No information about the number of pages\",\r\n\t\t\tthumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\r\n\t\t\tlanguage: comics.textObjects[0]?.language || \"en-us\",\r\n\t\t\tprice: comics.prices[0].price ? `${comics.prices[0].price}$` : 'not available',\r\n\t\t}\r\n\t}\r\n\r\n\treturn { loading, error, getAllCharacters, getCharacter, clearError, getAllComics, getComic, getCharacterByName }\r\n}\r\n\r\nexport default useMarvelService\r\n"],"names":["AppBanner","_jsxs","className","children","_jsx","src","avengers","alt","avengersLogo","CriticalErrorMessage","img","_ref","Component","dataType","id","useParams","data","setData","useState","loading","error","getComic","getCharacter","clearError","useMarvelService","useEffect","updateData","then","onDataLoaded","Error","errorMessage","spinner","Spinner","content","_Fragment","e","setLoading","setError","request","useCallback","async","url","method","arguments","length","undefined","body","headers","response","fetch","ok","concat","status","json","message","useHttp","_apiBase","_apiKey","_transformCharacter","char","name","description","slice","thumbnail","path","extension","homepage","urls","wiki","comics","items","_transformComics","_comics$textObjects$","title","pageCount","language","textObjects","price","prices","getAllCharacters","offset","results","map","res","getAllComics","getCharacterByName"],"sourceRoot":""}