{"version":3,"file":"static/js/80.f45f4f16.chunk.js","mappings":"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","sources":["components/appBanner/AppBanner.js","components/errors/ErrorMessage.js","components/pages/SingleComicPage.js","hooks/http.hook.js","services/MarvelService.js"],"sourcesContent":["import './appBanner.scss';\nimport avengers from '../../resources/img/Avengers.png';\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\n\nconst AppBanner = () => {\n    return (\n        <div className=\"app__banner\">\n            <img src={avengers} alt=\"Avengers\"/>\n            <div className=\"app__banner-text\">\n                New comics every week!<br/>\n                Stay tuned!\n            </div>\n            <img src={avengersLogo} alt=\"Avengers logo\"/>\n        </div>\n    )\n}\n\nexport default AppBanner;","import img from './error.gif'\r\nimport './ErrorMessage.scss'\r\n\r\nconst ErrorMessage = () => {\r\n\treturn (\r\n\t\t<div className=\"error-message\">\r\n\t\t\t<img src={img} alt=\"Error\" className='error-message'/>\r\n\t\t</div>\r\n  )\r\n};\r\n\r\nexport default ErrorMessage","import { useEffect, useState } from 'react'\r\nimport { Link, useParams } from 'react-router-dom'\r\nimport useMarvelService from '../../services/MarvelService'\r\nimport AppBanner from '../appBanner/AppBanner'\r\nimport ErrorMessage from '../errors/ErrorMessage'\r\nimport Spinner from '../spinner/Spinner'\r\n\r\nimport './SingleComicPage.scss'\r\n\r\nconst SingleComicPage = () => {\r\n\tconst { comicId } = useParams()\r\n\tconst [comic, setComic] = useState(null)\r\n\tconst { loading, error, getComic, clearError } = useMarvelService()\r\n\r\n\tuseEffect(() => {\r\n\t\tupdateComic()\r\n\t}, [comicId])\r\n\r\n\tconst updateComic = () => {\r\n\t\tclearError()\r\n\t\tgetComic(comicId).then(onComicLoaded)\r\n\t}\r\n\r\n\tconst onComicLoaded = comic => {\r\n\t\tsetComic(comic)\r\n\t}\r\n\r\n\tconst errorMessage = error ? <ErrorMessage /> : null\r\n\tconst spinner = loading ? <Spinner /> : null\r\n\tconst content = !(loading || error || !comic) ? <View comic={comic} /> : null\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<AppBanner />\r\n\t\t\t{spinner}\r\n\t\t\t{errorMessage}\r\n\t\t\t{content}\r\n\t\t</>\r\n\t)\r\n}\r\n\r\nconst View = ({ comic }) => {\r\n\tconst { title, description, pageCount, thumbnail, language, price } = comic\r\n\treturn (\r\n\t\t<div className='single-comic'>\r\n\t\t\t<img src={thumbnail} alt={title} className='single-comic__img' />\r\n\t\t\t<div className='single-comic__info'>\r\n\t\t\t\t<h2 className='single-comic__name'>{title}</h2>\r\n\t\t\t\t<p className='single-comic__descr'>{description}</p>\r\n\t\t\t\t<p className='single-comic__descr'>{pageCount}</p>\r\n\t\t\t\t<p className='single-comic__descr'>Language: {language}</p>\r\n\t\t\t\t<div className='single-comic__price'>{price}</div>\r\n\t\t\t</div>\r\n\t\t\t<Link className='single-comic__back' to='/comics'>\r\n\t\t\t\tBack to all\r\n\t\t\t</Link>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default SingleComicPage\r\n","import { useState, useCallback } from 'react';\r\n\r\nconst useHttp = (e) => {\r\n\tconst [loading, setLoading] = useState(false);\r\n\tconst [error, setError] = useState(null);\r\n\r\n\tconst request = useCallback(async (url, method = 'GET', body = null, \r\n\theaders = {'Content-Type': 'application/json'}) => {\r\n\t\tsetLoading(true)\r\n\t\ttry {\r\n\t\t\tconst response = await fetch(url, {method, body, headers});\r\n\t\t\tif (!response.ok) {\r\n\t\t\t\tthrow new Error(`Could not fetch ${url}, status: ${response.status}`)\r\n\t\t\t}\r\n\t\t\tconst data = await response.json();\r\n\t\t\tsetLoading(false)\r\n\t\t\treturn data\r\n\t\t} catch (error) {\r\n\t\t\tsetLoading(false)\r\n\t\t\tsetError(error.message)\r\n\t\t\tthrow error\r\n\t\t}\r\n\t}, []);\r\n\r\n\tconst clearError = useCallback(() => {\r\n\t\tsetError(null)\r\n\t}, [])\r\n\r\n\treturn {loading, request, error, clearError}\r\n};\r\n\r\nexport default useHttp","import useHttp from '../hooks/http.hook'\r\n\r\nconst useMarvelService = () => {\r\n\tconst { loading, request, error, clearError } = useHttp()\r\n\tconst _apiBase = 'https://gateway.marvel.com:443/v1/public/'\r\n\tconst _apiKey = 'apikey=13fce9aab4e28128f7b9d466dbd48844'\r\n\tconst _baseOffset = 210\r\n\r\n\tconst getAllCharacters = async (offset = _baseOffset) => {\r\n\t\tconst res = await request(\r\n\t\t\t`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`\r\n\t\t)\r\n\t\treturn res.data.results.map(_transformCharacter)\r\n\t}\r\n\r\n\tconst getCharacter = async id => {\r\n\t\tconst res = await request(`${_apiBase}characters/${id}?${_apiKey}`)\r\n\t\treturn _transformCharacter(res.data.results[0])\r\n\t}\r\n\r\n\tconst getAllComics = async (offset = 0) => {\r\n\t\tconst res = await request(\r\n\t\t\t`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`\r\n\t\t)\r\n\t\treturn res.data.results.map(_transformComics)\r\n\t}\r\n\r\n\tconst getComic = async id => {\r\n\t\tconst res = await request(`${_apiBase}comics/${id}?${_apiKey}`)\r\n\t\treturn _transformComics(res.data.results[0])\r\n\t}\r\n\r\n\tconst _transformCharacter = char => {\r\n\t\treturn {\r\n\t\t\tid: char.id,\r\n\t\t\tname: char.name,\r\n\t\t\tdescription: char.description\r\n\t\t\t\t? `${char.description.slice(0, 150)}...`\r\n\t\t\t\t: 'Sorry...There is no description for this character',\r\n\t\t\tthumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n\t\t\thomepage: char.urls[0].url,\r\n\t\t\twiki: char.urls[1].url,\r\n\t\t\tcomics: char.comics.items ? char.comics.items.slice(0, 10) : null,\r\n\t\t}\r\n\t}\r\n\r\n\tconst _transformComics = comics => {\r\n\t\treturn {\r\n\t\t\tid: comics.id,\r\n\t\t\ttitle: comics.title,\r\n\t\t\tdescription: comics.description\r\n\t\t\t\t? `${comics.description.slice(0, 35)}...`\r\n\t\t\t\t: 'Sorry...There is no description',\r\n\t\t\tpageCount: comics.pageCount\r\n\t\t\t\t? `${comics.pageCount} p.`\r\n\t\t\t\t: \"No information about the number of pages\",\r\n\t\t\tthumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\r\n\t\t\tlanguage: comics.textObjects[0]?.language || \"en-us\",\r\n\t\t\tprice: comics.prices[0].price ? `${comics.prices[0].price}$` : 'not available',\r\n\t\t}\r\n\t}\r\n\r\n\treturn { loading, error, getAllCharacters, getCharacter, clearError, getAllComics, getComic }\r\n}\r\n\r\nexport default useMarvelService\r\n"],"names":["AppBanner","_jsxs","className","children","_jsx","src","avengers","alt","avengersLogo","ErrorMessage","img","View","_ref","comic","title","description","pageCount","thumbnail","language","price","Link","to","SingleComicPage","comicId","useParams","setComic","useState","loading","error","getComic","clearError","useMarvelService","useEffect","updateComic","then","onComicLoaded","errorMessage","spinner","Spinner","content","_Fragment","e","setLoading","setError","request","useCallback","async","url","method","arguments","length","undefined","body","headers","response","fetch","ok","Error","concat","status","data","json","message","useHttp","_apiBase","_apiKey","_transformCharacter","char","id","name","slice","path","extension","homepage","urls","wiki","comics","items","_transformComics","_comics$textObjects$","textObjects","prices","getAllCharacters","offset","results","map","getCharacter","res","getAllComics"],"sourceRoot":""}